// Autogenerated from Pigeon (v10.1.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "LuciqPigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *FeatureFlagsFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface FeatureFlagsFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FeatureFlagsFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onW3CFeatureFlagChangeIsW3cExternalTraceIDEnabled:(NSNumber *)arg_isW3cExternalTraceIDEnabled isW3cExternalGeneratedHeaderEnabled:(NSNumber *)arg_isW3cExternalGeneratedHeaderEnabled isW3cCaughtHeaderEnabled:(NSNumber *)arg_isW3cCaughtHeaderEnabled completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.luciq_flutter.FeatureFlagsFlutterApi.onW3CFeatureFlagChange"
      binaryMessenger:self.binaryMessenger
      codec:FeatureFlagsFlutterApiGetCodec()];
  [channel sendMessage:@[arg_isW3cExternalTraceIDEnabled ?: [NSNull null], arg_isW3cExternalGeneratedHeaderEnabled ?: [NSNull null], arg_isW3cCaughtHeaderEnabled ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onNetworkLogBodyMaxSizeChangeNetworkBodyMaxSize:(NSNumber *)arg_networkBodyMaxSize completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.luciq_flutter.FeatureFlagsFlutterApi.onNetworkLogBodyMaxSizeChange"
      binaryMessenger:self.binaryMessenger
      codec:FeatureFlagsFlutterApiGetCodec()];
  [channel sendMessage:@[arg_networkBodyMaxSize ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

NSObject<FlutterMessageCodec> *LuciqHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void LuciqHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<LuciqHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setEnabled"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnabledIsEnabled:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.isEnabled"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isEnabledWithError:)], @"LuciqHostApi api (%@) doesn't respond to @selector(isEnabledWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.isBuilt"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isBuiltWithError:)], @"LuciqHostApi api (%@) doesn't respond to @selector(isBuiltWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isBuiltWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.init"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initToken:invocationEvents:debugLogsLevel:appVariant:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(initToken:invocationEvents:debugLogsLevel:appVariant:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_token = GetNullableObjectAtIndex(args, 0);
        NSArray<NSString *> *arg_invocationEvents = GetNullableObjectAtIndex(args, 1);
        NSString *arg_debugLogsLevel = GetNullableObjectAtIndex(args, 2);
        NSString *arg_appVariant = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api initToken:arg_token invocationEvents:arg_invocationEvents debugLogsLevel:arg_debugLogsLevel appVariant:arg_appVariant error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.enableAutoMasking"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(enableAutoMaskingAutoMasking:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(enableAutoMaskingAutoMasking:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_autoMasking = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api enableAutoMaskingAutoMasking:arg_autoMasking error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.show"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showWithError:)], @"LuciqHostApi api (%@) doesn't respond to @selector(showWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api showWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.showWelcomeMessageWithMode"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showWelcomeMessageWithModeMode:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(showWelcomeMessageWithModeMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_mode = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api showWelcomeMessageWithModeMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.identifyUser"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(identifyUserEmail:name:userId:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(identifyUserEmail:name:userId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_email = GetNullableObjectAtIndex(args, 0);
        NSString *arg_name = GetNullableObjectAtIndex(args, 1);
        NSString *arg_userId = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api identifyUserEmail:arg_email name:arg_name userId:arg_userId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setUserData"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserDataData:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setUserDataData:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_data = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setUserDataData:arg_data error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setAppVariant"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAppVariantAppVariant:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setAppVariantAppVariant:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appVariant = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setAppVariantAppVariant:arg_appVariant error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.logUserEvent"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(logUserEventName:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(logUserEventName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_name = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api logUserEventName:arg_name error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.logOut"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(logOutWithError:)], @"LuciqHostApi api (%@) doesn't respond to @selector(logOutWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api logOutWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setEnableUserSteps"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnableUserStepsIsEnabled:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setEnableUserStepsIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setEnableUserStepsIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.logUserSteps"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(logUserStepsGestureType:message:viewName:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(logUserStepsGestureType:message:viewName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_gestureType = GetNullableObjectAtIndex(args, 0);
        NSString *arg_message = GetNullableObjectAtIndex(args, 1);
        NSString *arg_viewName = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api logUserStepsGestureType:arg_gestureType message:arg_message viewName:arg_viewName error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setLocale"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLocaleLocale:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setLocaleLocale:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_locale = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setLocaleLocale:arg_locale error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setColorTheme"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setColorThemeTheme:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setColorThemeTheme:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_theme = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setColorThemeTheme:arg_theme error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setWelcomeMessageMode"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setWelcomeMessageModeMode:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setWelcomeMessageModeMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_mode = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setWelcomeMessageModeMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setSessionProfilerEnabled"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSessionProfilerEnabledEnabled:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setSessionProfilerEnabledEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setSessionProfilerEnabledEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setValueForStringWithKey"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setValueForStringWithKeyValue:key:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setValueForStringWithKeyValue:key:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_value = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setValueForStringWithKeyValue:arg_value key:arg_key error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.appendTags"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(appendTagsTags:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(appendTagsTags:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_tags = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api appendTagsTags:arg_tags error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.resetTags"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resetTagsWithError:)], @"LuciqHostApi api (%@) doesn't respond to @selector(resetTagsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api resetTagsWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.getTags"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTagsWithCompletion:)], @"LuciqHostApi api (%@) doesn't respond to @selector(getTagsWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getTagsWithCompletion:^(NSArray<NSString *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.addFeatureFlags"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addFeatureFlagsFeatureFlagsMap:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(addFeatureFlagsFeatureFlagsMap:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, NSString *> *arg_featureFlagsMap = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api addFeatureFlagsFeatureFlagsMap:arg_featureFlagsMap error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.removeFeatureFlags"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeFeatureFlagsFeatureFlags:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(removeFeatureFlagsFeatureFlags:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_featureFlags = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api removeFeatureFlagsFeatureFlags:arg_featureFlags error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.removeAllFeatureFlags"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeAllFeatureFlagsWithError:)], @"LuciqHostApi api (%@) doesn't respond to @selector(removeAllFeatureFlagsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api removeAllFeatureFlagsWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setUserAttribute"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserAttributeValue:key:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setUserAttributeValue:key:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_value = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setUserAttributeValue:arg_value key:arg_key error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.removeUserAttribute"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeUserAttributeKey:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(removeUserAttributeKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api removeUserAttributeKey:arg_key error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.getUserAttributeForKey"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUserAttributeForKeyKey:completion:)], @"LuciqHostApi api (%@) doesn't respond to @selector(getUserAttributeForKeyKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = GetNullableObjectAtIndex(args, 0);
        [api getUserAttributeForKeyKey:arg_key completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.getUserAttributes"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUserAttributesWithCompletion:)], @"LuciqHostApi api (%@) doesn't respond to @selector(getUserAttributesWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getUserAttributesWithCompletion:^(NSDictionary<NSString *, NSString *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setReproStepsConfig"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setReproStepsConfigBugMode:crashMode:sessionReplayMode:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setReproStepsConfigBugMode:crashMode:sessionReplayMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_bugMode = GetNullableObjectAtIndex(args, 0);
        NSString *arg_crashMode = GetNullableObjectAtIndex(args, 1);
        NSString *arg_sessionReplayMode = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setReproStepsConfigBugMode:arg_bugMode crashMode:arg_crashMode sessionReplayMode:arg_sessionReplayMode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.reportScreenChange"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportScreenChangeScreenName:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(reportScreenChangeScreenName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_screenName = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportScreenChangeScreenName:arg_screenName error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setCustomBrandingImage"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCustomBrandingImageLight:dark:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setCustomBrandingImageLight:dark:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_light = GetNullableObjectAtIndex(args, 0);
        NSString *arg_dark = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setCustomBrandingImageLight:arg_light dark:arg_dark error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setFont"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFontFont:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setFontFont:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_font = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setFontFont:arg_font error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.addFileAttachmentWithURL"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addFileAttachmentWithURLFilePath:fileName:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(addFileAttachmentWithURLFilePath:fileName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_filePath = GetNullableObjectAtIndex(args, 0);
        NSString *arg_fileName = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api addFileAttachmentWithURLFilePath:arg_filePath fileName:arg_fileName error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.addFileAttachmentWithData"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addFileAttachmentWithDataData:fileName:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(addFileAttachmentWithDataData:fileName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_data = GetNullableObjectAtIndex(args, 0);
        NSString *arg_fileName = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api addFileAttachmentWithDataData:arg_data fileName:arg_fileName error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.clearFileAttachments"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearFileAttachmentsWithError:)], @"LuciqHostApi api (%@) doesn't respond to @selector(clearFileAttachmentsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearFileAttachmentsWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.networkLog"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(networkLogData:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(networkLogData:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_data = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api networkLogData:arg_data error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.registerFeatureFlagChangeListener"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerFeatureFlagChangeListenerWithError:)], @"LuciqHostApi api (%@) doesn't respond to @selector(registerFeatureFlagChangeListenerWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api registerFeatureFlagChangeListenerWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.isW3CFeatureFlagsEnabled"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isW3CFeatureFlagsEnabledWithError:)], @"LuciqHostApi api (%@) doesn't respond to @selector(isW3CFeatureFlagsEnabledWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSDictionary<NSString *, NSNumber *> *output = [api isW3CFeatureFlagsEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.willRedirectToStore"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(willRedirectToStoreWithError:)], @"LuciqHostApi api (%@) doesn't respond to @selector(willRedirectToStoreWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api willRedirectToStoreWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setNetworkLogBodyEnabled"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setNetworkLogBodyEnabledIsEnabled:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setNetworkLogBodyEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setNetworkLogBodyEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.getNetworkBodyMaxSize"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getNetworkBodyMaxSizeWithCompletion:)], @"LuciqHostApi api (%@) doesn't respond to @selector(getNetworkBodyMaxSizeWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getNetworkBodyMaxSizeWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setTheme"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setThemeThemeConfig:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setThemeThemeConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_themeConfig = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setThemeThemeConfig:arg_themeConfig error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.luciq_flutter.LuciqHostApi.setFullscreen"
        binaryMessenger:binaryMessenger
        codec:LuciqHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFullscreenIsEnabled:error:)], @"LuciqHostApi api (%@) doesn't respond to @selector(setFullscreenIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setFullscreenIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
